//
//  ultrasn0w.h
//  ultrasn0w
//
//  Created by djayb6 on 9/30/12.
//  Copyright (c) 2012 djayb6. No rights reserved.
//

#ifndef ultrasn0w_ultrasn0w_h
#define ultrasn0w_ultrasn0w_h

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <dlfcn.h>
#include <unistd.h>
#include <pthread.h>
#include <termios.h>
#include <mach-o/dyld.h>
#include <mach-o/loader.h>
#include <mach-o/getsect.h>
#include <sys/utsname.h>
#include <sys/fcntl.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/time.h>
#include "substrate.h"

#define CTOR \
__attribute__((__constructor__)) static void _Entry(void)

//#define MAIN \
int main(int argc, const char * argv[])

//#define EXPORT __attribute__((visibility("default")))

char * activation_ticket[6] = {
    "at+xlck=0",
    "at+xlck=1,1,\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"",
    "at+xlck=1,2,\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"",
    "at+xlck=1,3,\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"",
    "at+xlck=1,4,\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"",
    "at+xlck=2"
};

/*
 
char * unlock_strings[4] = {
    "",
    "",
    "",
    ""
};
 
 */



// global variables

long            slide;
int             lowFD;
int             fw;
pthread_mutex_t at_mutex;
struct termios* term;
char*           read_buf;
bool            isCompatible = false;

// normal function
static void     timestamp(char* date);
static size_t   FindString(const char* string);
static size_t   FindStringN(const char* string, size_t lentgh);
static size_t   FindReference(size_t address);
static size_t   FindLastThumbFunction(size_t address);
static int      InitConn(speed_t speed);
static int      AT(int fildes);
static int      ReadResp(int fildes, int a, int b);
static void     SendAT(int fildes);
static void     SendStrCmd(int fildes, const char* command);
static int      SendCmd(int fildes, const char* command, size_t cmd_length);
static int      CheckCompatibility();
static char*    BasebandVersion();
static int      atprog(char** array, int length);

// MS functions

static int      (*s_orig_open) (char * filename, int flags);
static int      my_open(char *filename, int flags);

static int      (*XLockHandler) (void* a, char** command, void* c, void* d); // must check right data types
static void      my_XLockHandler(void* a, char** command, void* c, void* d);

static int      (*InternalNotification)(char* a, int b, int c, int d, void* e); // must check right data types
static void      my_InternalNotification(char* a, int b, int c, int d, void* e);

#endif
